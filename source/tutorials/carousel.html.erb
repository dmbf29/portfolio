<% set_meta_tags(project_name: 'Side Scrolling Carousel', title: 'Side Scrolling Carousel', description: 'How to install Owl Carousel')  %>
<div class="nav-group">
  <i class="fas fa-chevron-left font-bold"></i>
  <%= image_tag "face.jpg" , alt: "doug_photo" , class: 'avatar-small-square ml-3' %>
    <%= link_to '' , '/#tutorials' , class: 'nav-group-link' %>
</div>
<div class="container mt-3 mb-5">
  <div class="row">
    <div class="col-12 small-container">
      <h1 class='small-h1-header'>Side Scrolling Carousel</h1>
      <p class='m-0'><em>How to install Owl Carousel</em></p>

      <div class="tutorial-section">
        <p>There are a lot of steps (and copying and pasting) in order to setup Owl Carousel in your Rails application. Let's try to do it together.
        </p>
      </div>

      <div class="tutorial-section">
        <h3 class='small-h3-header'>Adding the package</h3>
        <p>Assuming you're using <code>yarn</code>, we'll add the package from Terminal:</p>
        <div class="code-wrapper">
          <% code('shell') do %>
yarn add owl.carousel
          <% end %>
        </div>
      </div>

      <div class="tutorial-section">
        <h3 class='small-h3-header'>Configuring the package</h3>
        <p>Now let's configure our JS for this package. Let's head to <code> javascript/packs/application.js</code></p>
        <p>There are two things we need to do here. First, let's import Owl Carousel</p>
        <div class="code-wrapper">
          <% code('javascript') do %>
// javascript/packs/application.js
import 'owl.carousel/dist/assets/owl.carousel.css';
import 'owl.carousel';
          <% end %>
        </div>
        <p>Second, we need to activate the Owl Carousel in the same file. Be careful, with this one. You might already have the <code>document.addEventListener</code> if you created the app with the Le Wagon templates. If that's the case, don't duplicate it, add it to the existing one.</p>
        <div class="code-wrapper">
          <% code('javascript') do %>
// be careful you *might* already have this listener
document.addEventListener('turbolinks:load', () => {
  $('.owl-carousel').owlCarousel({
    loop: true,
    margin: 10,
    responsive:{
      0:{
        items:1
       },
      600:{
        items:3
       },
      1000: {
        items: 5
      }
     },
     nav: true,
     navText: ["<i class='fa fa-chevron-left'></i>","<i class='fa fa-chevron-right'></i>"]
   })
});
          <% end %>
        </div>
        <p>Notice there are a few options can tweak in here. These are the default setting that I use. As you can see, you can choose the responsiveness and if you want the side arrows on your scrollable container.</p>
        <br>
        <p>Lastly, we need to attach jQuery to the window. I'm going under the assumption you've already installed jQuery for Bootstrap. Go to your <code>config/webpack/environment.js</code>. We need to add this line: <code>window.jQuery': 'jquery'</code>. It should look like this now:</p>
        <div class="code-wrapper">
          <% code('javascript') do %>
// config/webpack/environment.js
const { environment } = require('@rails/webpacker')

const webpack = require('webpack')
environment.plugins.prepend('Provide',
  new webpack.ProvidePlugin({
    $: 'jquery',
    jQuery: 'jquery',
    Popper: ['popper.js', 'default'],
    'window.jQuery': 'jquery'
  })
)
module.exports = environment
          <% end %>
        </div>
      </div>

      <div class="tutorial-section pb-0">
        <h3 class='small-h3-header'>Adding the style</h3>
        <p>Next, we need to make sure we're using the CSS that we were importing in our JS above. Let's head to our <code>app/views/layouts/application.html</code>. Let's add this into our <code>head</code></p>
        <div class="code-wrapper">
          <% code('erb') do %>
<!-- app/views/layouts/application.html -->

<%%= stylesheet_pack_tag 'application' %>
          <% end %>
        </div>
        <p>Lastly, we can add some style to the navigation arrows <strong>if you kept them active in the configuration</strong>. Feel free to change as you see fit.</p>

      </div>

      <div class="tutorial-section">
        <div class="d-flex justify-content-center">
          <%= image_tag 'tutorials/cloudinary_env.png', width: '100%' %>
        </div>
      </div>

      <div class="tutorial-section">
        <p>Let's go to your <%= link_to "Cloudinary console", "https://cloudinary.com/console", target: "_blank", class: 'link-gray'  %> to get *your* <strong>API environment variable</strong>. Copy it and paste it into your <code>.env</code> file.</p>
        <div class="code-wrapper">
          <% code('ruby') do %>
# .env
CLOUDINARY_URL=cloudinary://298522699261255:Qa1ZfO4syfbOC-***********************8
          <% end %>
        </div>
      </div>

      <div class="tutorial-section">
        <p>While we're setting the secret key, let's not forget to let Heroku know as well. Let's paste our <code>CLOUDINARY_URL</code> in the Terminal.
        </p>
        <div class="code-wrapper">
          <% code('shell') do %>
heroku config:set CLOUDINARY_URL=cloudinary://298....
          <% end %>
        </div>
      </div>

      <div class="tutorial-section">
        <h3 class='small-h3-header'>Installing ActiveStorage</h3>
        <p>There's a lot of "magic" happening behind the scenees with ActiveStorage. It order for it to work, it needs a bit of configuration so be careful with the copy and pasting here. First, the migrations</p>
        <div class="code-wrapper">
          <% code('shell') do %>
rails active_storage:install
rails db:migrate
          <% end %>
        </div>
      </div>

      <div class="tutorial-section">
        <p>Now for the config files. Make sure you're in the correct file, there are three.</p>
        <div class="code-wrapper">
          <% code('yaml') do %>
# config/storage.yml
cloudinary:
  service: Cloudinary
# You can remove everything else in this file.
          <% end %>
        </div>
        <p>Replace <code>:local</code> by <code>:cloudinary</code> in the config.</p>
        <p>⚠️ <strong>Make sure you do not have this line twice.</strong></p>
        <div class="code-wrapper">
          <% code('ruby') do %>
# config/environments/development.rb
config.active_storage.service = :cloudinary
          <% end %>
        </div>

        <p>And also in the production file</p>
        <div class="code-wrapper">
          <% code('ruby') do %>
# config/environments/production.rb
config.active_storage.service = :cloudinary
          <% end %>
        </div>
      </div>

      <div class="tutorial-section">
        <h3 class='small-h3-header'>Attaching a photo to a model</h3>
        <p>This will allow users to upload a photo to our model.</p>
        <p><strong>Make sure you've restarted your Rails server.</strong></p>
        <div class="code-wrapper">
          <% code('ruby') do %>
class Cocktail < ApplicationRecord
  has_one_attached :photo
end
          <% end %>
        </div>
        <p>Now for the form and strong parameters.</p>
        <div class="code-wrapper">
          <% code('erb') do %>
<!-- app/views/cocktails/_form.html.erb -->
<%%= simple_form_for @cocktail do |f| %>
  <!-- [...] -->
  <%%= f.input :photo, as: :file %>
  <!-- [...] -->
<%% end %>
          <% end %>
        </div>
        <div class="code-wrapper">
          <% code('ruby') do %>
# app/controllers/articles_controller.rb
def cocktail_params
  params.require(:cocktail).permit(:name, :photo)
end
          <% end %>
        </div>
      </div>

      <div class="tutorial-section">
        <h3 class='small-h3-header'>Using the image in the view</h3>
        <p>This can be tricky so you need to be careful. There's two different ways we can use the new images</p>
        <p><code>cl_image_tag</code> builds an <code>img</code> tag.</p>
        <p><code>cl_image_path</code> builds a url <code>"https://res.cloudinary.com/..."</code></p>
      </div>

      <div class="tutorial-section">
        <p><strong>Adding a photo as a background image</strong></p>
        <div class="code-wrapper">
          <% code('erb') do %>
<div class="card-category" style="background-image: linear-gradient(rgba(0,0,0,0.3), rgba(0,0,0,0.3)), url(<%%= cocktail.photo.attached? ? (cl_image_path cocktail.photo.key) : "http://loremflickr.com/300/260/cocktail" %>)">
  <%%= cocktail.name %>
</div>
          <% end %>
        </div>
        <p>Notice what went into the card <code>url</code>. We have a conditional to make sure there's a photo attached. <code>cocktail.photo.attached? ? truthy : falsy</code></p>
        <p><%= link_to "Link to the CSS", "https://uikit.lewagon.com/documentation#card_category", target: "_blank", class: "link-gray" %></p>
      </div>

      <div class="tutorial-section">
        <p><strong>Adding a photo as an image</strong></p>
        <div class="code-wrapper">
          <% code('erb') do %>
<%% if cocktail.photo.attached? %>
  <%%= cl_image_tag cocktail.photo.key, alt: "cocktail image", class: 'anthing_you_want' %>
<%% else %>
  <%%= image_tag "http://loremflickr.com/300/260/cocktail", alt: "cocktail image", class: 'anthing_you_want' %>
<%% end %>
          <% end %>
        </div>
      </div>

      <div class="tutorial-section">
        <h3 class='small-h3-header'>Attaching Photos in your seeds</h3>
                <div class="code-wrapper">
          <% code('ruby') do %>
require "open-uri" # at the top

puts 'Creating cocktails... (this could take a minute)'
30.times do
  cocktail = Cocktail.create!(name: 'SOMETHING_FROM_FAKER')
  file = URI.open('http://loremflickr.com/300/260/cocktail')
  cocktail.photo.attach(io: file, filename: 'cocktail.png', content_type: 'image/png')
end
puts "...created #{Cocktail.count} cocktails"
          <% end %>
      </div>

      <div class="tutorial-section">
        <h3 class='small-h3-header'>Active Storage Validations</h3>
        <p>If you want to require your user to upload an image, you can follow the <%= link_to "Active Storage Validations gem", "https://github.com/igorkasyanchuk/active_storage_validations#active-storage-validations", targer: "_blank", class: 'link-gray' %> setup.</p>
      </div>
    </div>
  </div>
</div>
